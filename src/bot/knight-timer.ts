import { Injectable } from '@nestjs/common';
import { Context } from './context.interface';
import { Ctx, Hears, Update, Action } from 'nestjs-telegraf';

@Injectable()
@Update()
export class KnightsBotService {
   private timers = new Map<string, NodeJS.Timeout>();
   private buttonState = new Map<string, number>();
   private keyboardUpdateRunning = false;
   private keyboardUpdateInterval: NodeJS.Timeout | null = null;

   @Hears('knight')
   async knights(@Ctx() ctx: Context) {
      this.generateKeyboard(ctx);
   }

   @Action(/all_(.+)/)
   async allQuery(@Ctx() ctx: Context) {
      let data = ctx.callbackQuery['data'];
      if (data) {
         // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –¥–∞–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
         this.setTimersForAllButtons(data, ctx);
         await ctx.answerCbQuery('–¢–∞–π–º–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã');
      }
   }

   @Action(/only_(.+)/)
   async onlyQuery(@Ctx() ctx: Context) {
      let data = ctx.callbackQuery['data'];
      if (data) {
         this.startTimerForButton(data, ctx);
         await ctx.answerCbQuery('–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      }
   }

   @Action('null')
   async nullClick(@Ctx() ctx: Context) {
      await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏ —Ç–∞–π–º–µ—Ä');
   }

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
   setTimersForAllButtons(buttonId: string, @Ctx() ctx: Context) {
      const rowButtons = this.keyboardText.flat().filter(button => button.callback_data.startsWith('only_' + buttonId.split('_')[1]));
      rowButtons.forEach(button => {
         this.startTimerForButton(button.callback_data, ctx);  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
      });
   }

   async startTimerForButton(buttonId: string, @Ctx() ctx: Context | null) {
      // –ï—Å–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
      if (this.timers.has(buttonId)) {
         clearInterval(this.timers.get(buttonId));
         this.timers.delete(buttonId);
         this.buttonState.delete(buttonId);
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á—ë—Ç –æ—Ç 10:00 (600 —Å–µ–∫—É–Ω–¥)
      let currentTime = 600; // 10 –º–∏–Ω—É—Ç
      this.buttonState.set(buttonId, currentTime);

      const interval = setInterval(async () => {
         currentTime -= 10; // —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
         this.buttonState.set(buttonId, currentTime);

         // –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–æ—à–ª–æ –¥–æ 0, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
         if (currentTime <= 0) {
            this.buttonState.set(buttonId, 600); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
            clearInterval(interval);
            this.timers.delete(buttonId);
         }

         // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
         if (ctx) await this.updateKeyboard(ctx);
      }, 10000);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –≤ Map
      this.timers.set(buttonId, interval);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!this.keyboardUpdateRunning) {
         this.keyboardUpdateRunning = true;
         this.keyboardUpdateInterval = setInterval(async () => {
            if (this.timers.size === 0) {
               this.keyboardUpdateRunning = false;
               if (this.keyboardUpdateInterval) {
                  clearInterval(this.keyboardUpdateInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–µ—Ä
               }
            }
         }, 10000);
      }
   }

   async updateKeyboard(@Ctx() ctx: Context) {
      const updatedKeyboard = this.keyboardText.map(row => row.map(button => {
         if (this.buttonState.has(button.callback_data)) {
            // –ï—Å–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Ç–µ–∫—Å—Ç
            const currentTime = this.buttonState.get(button.callback_data) || 0;
            const minutes = Math.floor(currentTime / 60).toString().padStart(2, '0');
            const seconds = (currentTime % 60).toString().padStart(2, '0');
            button.text = `${minutes}:${seconds}`;
         } else if (button.text === '10:00') {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å '10:00' –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            button.text = '10:00';
         }
         return button;
      }));

      await ctx.editMessageReplyMarkup({
         inline_keyboard: updatedKeyboard,
      });
   }

   async generateKeyboard(ctx) {
      await ctx.reply('–¢–∞–π–º–∏–Ω–≥–∏ –∫–Ω–∞–π—Ç–æ–≤', {
         reply_markup: {
            inline_keyboard: this.keyboardText,
         },
      });
   }

   get keyboardText() {
      return [
         [
            { text: '–ú–û–°–¢', callback_data: 'null' }
         ],
         [
            { text: 'üîÑ', callback_data: 'all_bridge' },
            { text: '10:00', callback_data: 'only_bridge_one' },
            { text: "10:00", callback_data: 'only_bridge_two' },
            { text: "10:00", callback_data: 'only_bridge_three' },
         ],
         [
            { text: '–î–í–û–ô–ö–ê', callback_data: 'null' }
         ],
         [
            { text: 'üîÑ', callback_data: 'all_two' },
            { text: '10:00', callback_data: 'only_two_one' },
            { text: "10:00", callback_data: 'only_two_two' },
            { text: "10:00", callback_data: 'only_two_three' },
         ],
         [
            { text: '–ö–ê–ú–ï–ù–¨', callback_data: 'null' },
            // { text: 'üîÑ', callback_data: 'all_kamen' },
            { text: '10:00', callback_data: 'only_kamen_one' },
         ],
         [
            { text: '–ß–ï–¢–í–Å–†–ö–ê', callback_data: 'null' }
         ],
         [
            { text: 'üîÑ', callback_data: 'all_four' },
            { text: '10:00', callback_data: 'only_four_one' },
            { text: "10:00", callback_data: 'only_four_two' },
            { text: "10:00", callback_data: 'only_four_three' },
         ],
         [
            { text: '–ü–Ø–¢–Å–†–ö–ê', callback_data: 'null' }
         ],
         [
            { text: 'üîÑ', callback_data: 'all_five' },
            { text: '10:00', callback_data: 'only_five_one' },
            { text: "10:00", callback_data: 'only_five_two' },
            { text: "10:00", callback_data: 'only_five_three' },
         ]
      ]
   }
}
